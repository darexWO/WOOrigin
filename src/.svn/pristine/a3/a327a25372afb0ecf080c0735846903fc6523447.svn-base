package rs.invado.wo.dao.ocp;

// Generated Dec 9, 2012 5:42:26 PM by Hibernate Tools 3.4.0.CR1


import org.apache.commons.lang.time.DateUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.*;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import rs.invado.wo.domain.ocp.OcpProizvod;
import rs.invado.wo.domain.prod.ProdPoreskaStopa;
import rs.invado.wo.domain.uz.UzStanjeZalihaSkladista;
import rs.invado.wo.domain.wo.WoParametri;
import rs.invado.wo.domain.wo.WoPartnerSetting;
import rs.invado.wo.dto.Proizvodi;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.PersistenceContext;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * Home object for domain model class OcpProizvod.
 *
 * @author Hibernate Tools
 * @see rs.invado.wo.dao.ocp.OcpProizvodHome
 */

@Repository
@Transactional
public class OcpProizvodHome {

    private static final Log log = LogFactory.getLog(OcpProizvodHome.class);


    @PersistenceContext
    private EntityManager entityManager;

    public Session getSession() {
        Session session = entityManager.unwrap(Session.class);
        return session;
    }

    public void persist(OcpProizvod transientInstance) {
        log.debug("persisting OcpProizvod instance");
        try {
            entityManager.persist(transientInstance);
            entityManager.flush();
            log.debug("persist successful");
        } catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }

    public void remove(OcpProizvod persistentInstance) {
        log.debug("removing OcpProizvod instance");
        try {
            entityManager.remove(persistentInstance);
            log.debug("remove successful");
        } catch (RuntimeException re) {
            log.error("remove failed", re);
            throw re;
        }
    }

    public OcpProizvod merge(OcpProizvod detachedInstance) {
        log.debug("merging OcpProizvod instance");
        try {
            OcpProizvod result = entityManager.merge(detachedInstance);
            entityManager.flush();
            log.debug("merge successful");
            return result;
        } catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }

    public OcpProizvod findById(int id) {
        log.debug("getting OcpProizvod instance with id: " + id);
        try {
            OcpProizvod instance = entityManager.find(OcpProizvod.class, id);
            log.debug("get successful");
            return instance;
        } catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }


    private int getRowCount(Criteria cr) {
        Criteria crRowCount = cr.setProjection(Projections.rowCount());
        int rowCount = Integer.valueOf(cr.uniqueResult().toString());
        return rowCount;
    }


    private DetachedCriteria getProPoSklSubquery(List<WoPartnerSetting> woPartnerSettings) {


        Integer[] skladista = new Integer[woPartnerSettings.size()];
        for (int i = 0; i < woPartnerSettings.size(); i++) {
            System.out.println("skladista " + woPartnerSettings.get(i).getIdSkladista());
            skladista[i] = Integer.valueOf(woPartnerSettings.get(i).getIdSkladista());
        }
        DetachedCriteria subquery = DetachedCriteria.forClass(UzStanjeZalihaSkladista.class, "skl")
                .setProjection(Projections.property("skl.id.proizvod"))
                .add(Restrictions.in("skl.id.idSkladista", skladista))
                .add(Restrictions.gt("skl.raspolozivoStanje", BigDecimal.valueOf(0.0d)));
        return subquery;
    }

    public Proizvodi findProizvodiZaBrend(String brand, int pageNo, int pageSize, WoParametri woParametri,
                                          List<WoPartnerSetting> woPartnerSettings) {

        //potrebno je da pro ima i osnovnu jm i alernativnu. ukoliko nije svojstveno ondaje osnovnoa = alternativnoj, postaviti triger i uraditi upradte tabele.
        Session session = getSession();
        Criteria cr = session.createCriteria(OcpProizvod.class, "pro")
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .createCriteria("pro.ocpKlasifikacijaProizvoda", "okp")
                .add(Restrictions.like("okp.id.klasifikacija", brand + "%"))
                .add(Restrictions.eq("okp.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeMeni()))
                .addOrder(Order.asc("pro.proizvod"));

        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        System.out.println("broj izvuƒçenih proizvoda je " + lp.size());
        return new Proizvodi(lp, rowCount);
    }

    public Proizvodi findProizvodiNaAkciji(String tipAkcije, int pageNo, int pageSize, WoParametri woParametri,
                                           List<WoPartnerSetting> woPartnerSettings) {
        Session session = getSession();

        Criteria cr = session.createCriteria(OcpProizvod.class, "pro")
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .createCriteria("woArtikliNaAkcijis", "wana")
                .add(Restrictions.eq("wana.idKompanijeKorisnik", woParametri.getWoKompanijaKorisnik().getId()))
                .add(Restrictions.like("wana.tipAkcije", tipAkcije, MatchMode.ANYWHERE))
                .add(Restrictions.ge("wana.datumDo", DateUtils.truncate(new Date(), Calendar.DATE)))
                .addOrder(Order.asc("pro.proizvod"));

        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, rowCount);
    }

    public Proizvodi findProizvodiByName(String namePattern, int pageNo, int pageSize, WoParametri woParametri,
                                         List<WoPartnerSetting> woPartnerSettings) {
        Criteria cr = getSession().createCriteria(OcpProizvod.class)
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .add(Restrictions.or(Restrictions.like("nazivProizvoda", namePattern, MatchMode.ANYWHERE).ignoreCase(),
                        Restrictions.like("dodatniNaziv", namePattern, MatchMode.ANYWHERE).ignoreCase()))
                .addOrder(Order.asc("nazivProizvoda"))
                .addOrder(Order.asc("dodatniNaziv"))
                .addOrder(Order.asc("proizvod"));
        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, rowCount);
    }

    public Proizvodi findFilterProizvodi(String brand, String patternNaziv, int pageNo, int pageSize, WoParametri woParametri,
                                         List<WoPartnerSetting> woPartnerSettings) {
        Session session = getSession();


        Criteria cr = session.createCriteria(OcpProizvod.class, "pro")
                .add(Restrictions.like("punNazivProizvoda", patternNaziv, MatchMode.ANYWHERE).ignoreCase())
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .createCriteria("pro.ocpKlasifikacijaProizvoda", "okp")
                .add(Restrictions.like("okp.id.klasifikacija", brand + "%"))
                .add(Restrictions.eq("okp.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeFilter()))
                .addOrder(Order.asc("pro.proizvod"));

        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, rowCount);
    }

    public BigDecimal findStopaPorezaZaProizvod(int OJ, int proizvod) {

        String namedQ = "stopaPoreza";
        try {
            ProdPoreskaStopa o = (ProdPoreskaStopa) entityManager.createNamedQuery(namedQ)
                    .setParameter("oj", OJ)
                    .setParameter("proizvod", proizvod)
                    .getSingleResult();
            return o.getStopaPoreza();
        } catch (NoResultException e) {
            e.getStackTrace();
        } catch (NonUniqueResultException e) {
            e.getStackTrace();
        }
        return null;
    }

    public List<OcpProizvod> findProizvodiByName(String namePattern) {
        List<OcpProizvod> lp = getSession().createCriteria(OcpProizvod.class)
                .add(Restrictions.like("punNazivProizvoda", namePattern, MatchMode.ANYWHERE).ignoreCase())
                .addOrder(Order.asc("punNazivProizvoda")).list();
        return lp;
    }


    public List<OcpProizvod> findProizvodiByNameAndByBrand(String namePattern, String brand, WoParametri woParametri) {
        List<OcpProizvod> lp = getSession().createCriteria(OcpProizvod.class)
                .add(Restrictions.like("punNazivProizvoda", namePattern, MatchMode.ANYWHERE).ignoreCase())
                .createCriteria("ocpKlasifikacijaProizvoda", "okp")
                .add(Restrictions.like("okp.id.klasifikacija", brand + "%"))
                .add(Restrictions.eq("okp.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeFilter()))
                .addOrder(Order.asc("punNazivProizvoda")).list();
        return lp;
    }

}
