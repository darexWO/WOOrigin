package rs.invado.wo.dao.ocp;

// Generated Dec 9, 2012 5:42:26 PM by Hibernate Tools 3.4.0.CR1


import org.apache.commons.lang.time.DateUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import rs.invado.wo.domain.ocp.OcpKlasifikacija;
import rs.invado.wo.domain.ocp.OcpKlasifikacijaProizvoda;
import rs.invado.wo.domain.ocp.OcpProizvod;
import rs.invado.wo.domain.prod.ProdPoreskaStopa;
import rs.invado.wo.domain.uz.UzStanjeZalihaSkladista;
import rs.invado.wo.domain.wo.WoParametri;
import rs.invado.wo.domain.wo.WoPartnerSetting;
import rs.invado.wo.dto.CompanySetting;
import rs.invado.wo.dto.Proizvodi;

import javax.persistence.*;
import java.math.BigDecimal;
import java.util.*;

/**
 * Home object for domain model class OcpProizvod.
 *
 * @author Hibernate Tools
 * @see rs.invado.wo.dao.ocp.OcpProizvodHome
 */

@Repository
@Transactional
public class OcpProizvodHome {

    private static final Log log = LogFactory.getLog(OcpProizvodHome.class);


    @PersistenceContext
    private EntityManager entityManager;
    @Autowired
    private OcpKlasifikacijaHome ocpKlasifikacijaDAO;

    public Session getSession() {
        Session session = entityManager.unwrap(Session.class);
        return session;
    }

    public void persist(OcpProizvod transientInstance) {
        log.debug("persisting OcpProizvod instance");
        try {
            entityManager.persist(transientInstance);
            entityManager.flush();
            log.debug("persist successful");
        } catch (RuntimeException re) {
            log.error("persist failed", re);
            throw re;
        }
    }

    public void remove(OcpProizvod persistentInstance) {
        log.debug("removing OcpProizvod instance");
        try {
            entityManager.remove(persistentInstance);
            log.debug("remove successful");
        } catch (RuntimeException re) {
            log.error("remove failed", re);
            throw re;
        }
    }

    public OcpProizvod merge(OcpProizvod detachedInstance) {
        log.debug("merging OcpProizvod instance");
        try {
            OcpProizvod result = entityManager.merge(detachedInstance);
            entityManager.flush();
            log.debug("merge successful");
            return result;
        } catch (RuntimeException re) {
            log.error("merge failed", re);
            throw re;
        }
    }

    public OcpProizvod findById(int id) {
        log.debug("getting OcpProizvod instance with id: " + id);
        try {
            OcpProizvod instance = entityManager.find(OcpProizvod.class, id);
            log.debug("get successful");
            return instance;
        } catch (RuntimeException re) {
            log.error("get failed", re);
            throw re;
        }
    }


    private int getRowCount(Criteria cr) {
        Criteria crRowCount = cr.setProjection(Projections.rowCount());
        int rowCount = Integer.valueOf(cr.uniqueResult().toString());
        return rowCount;
    }


    private DetachedCriteria getProPoSklSubquery(List<WoPartnerSetting> woPartnerSettings) {


        Integer[] skladista = new Integer[woPartnerSettings.size()];
        for (int i = 0; i < woPartnerSettings.size(); i++) {
            skladista[i] = Integer.valueOf(woPartnerSettings.get(i).getIdSkladista());
        }
        DetachedCriteria subquery = DetachedCriteria.forClass(UzStanjeZalihaSkladista.class, "skl")
                .setProjection(Projections.property("skl.id.proizvod"))
                .add(Restrictions.in("skl.id.idSkladista", skladista))
                .add(Restrictions.gt("skl.raspolozivoStanje", BigDecimal.valueOf(0.0d)));
        return subquery;
    }

    private DetachedCriteria getProPoBrand(String brand, WoParametri woParametri) {


        DetachedCriteria subquery = DetachedCriteria.forClass(OcpKlasifikacijaProizvoda.class, "klPro")
                .setProjection(Projections.property("klPro.ocpProizvod"))
                .add(Restrictions.like("klPro.id.klasifikacija", brand + "%"))
                .add(Restrictions.eq("klPro.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeMeni()));
        return subquery;
    }



    public Proizvodi findProizvodiZaBrend(String brand, int pageNo, int pageSize, WoParametri woParametri,
                                          List<WoPartnerSetting> woPartnerSettings, CompanySetting cs, Integer oj) {

        //potrebno je da pro ima i osnovnu jm i alernativnu. ukoliko nije svojstveno ondaje osnovnoa = alternativnoj, postaviti triger i uraditi upradte tabele.
        Session session = getSession();
        int vrstaKlasifikacijeSort = 0;
        Criteria cr;
        List<OcpKlasifikacija> meni = cs.getMeni().get(oj + "");
        for (OcpKlasifikacija ocpKlasifikacija : meni)
            if (ocpKlasifikacija.getId().getKlasifikacija().equals(brand))
                vrstaKlasifikacijeSort = ocpKlasifikacija.getSortByClass().intValue();

        if (vrstaKlasifikacijeSort != 0) {
            cr = session.createCriteria(OcpProizvod.class, "pro")
                    .setFirstResult(pageNo * pageSize)
                    .setMaxResults(pageSize)
                    .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                    .add(Subqueries.propertyIn("pro.proizvod",getProPoBrand(brand, woParametri)))
                    .createCriteria("pro.ocpKlasifikacijaProizvoda", "sortKlasa")
                    .add(Restrictions.eq("sortKlasa.id.vrstaKlasifikacije", vrstaKlasifikacijeSort))
                    .addOrder(Order.asc("sortKlasa.id.klasifikacija"))
                    .addOrder(Order.asc("pro.proizvod"));
        } else {
            cr = session.createCriteria(OcpProizvod.class, "pro")
                    .setFirstResult(pageNo * pageSize)
                    .setMaxResults(pageSize)
                    .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                    .add(Subqueries.propertyIn("pro.proizvod",getProPoBrand(brand, woParametri)))
                    .createCriteria("pro.cene", "stavkaCenovnika")
                    .add(Restrictions.eq("stavkaCenovnika.id.organizacionaJedinica", woPartnerSettings.get(0).getOrganizacionaJedinica()))
                    .add(Restrictions.eq("stavkaCenovnika.id.idCenovnik", woPartnerSettings.get(0).getIdCenovnik()))
                    .add(Restrictions.eq("stavkaCenovnika.id.idKlasaCene", woPartnerSettings.get(0).getIdKlasaCene()))
                    .addOrder(Order.asc("stavkaCenovnika.cena"))
                    .addOrder(Order.asc("pro.proizvod"));
        }

        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, vrstaKlasifikacijeSort, rowCount);
    }

    public Proizvodi findProizvodiZaBrendSorted(String brand, int pageNo, int pageSize, WoParametri woParametri,
                                                List<WoPartnerSetting> woPartnerSettings, CompanySetting cs) {

        //potrebno je da pro ima i osnovnu jm i alernativnu. ukoliko nije svojstveno ondaje osnovnoa = alternativnoj, postaviti triger i uraditi upradte tabele.
        List<OcpProizvod> lp = new ArrayList<OcpProizvod>();
        int vrstaKlasifikacijeSort = 0;
        int rowCount = 0;
        List<OcpKlasifikacija> meni = cs.getMeni().get(woParametri.getWoKompanijaKorisnik().getCorrespondingOJ() + "");
        for (OcpKlasifikacija ocpKlasifikacija : meni)
            if (ocpKlasifikacija.getId().getKlasifikacija().equals(brand))
                vrstaKlasifikacijeSort = ocpKlasifikacija.getSortByClass().intValue();

        String namedQ = "findSingleProizvodByBrand";
        Query q = entityManager.createNamedQuery(namedQ)
                .setParameter("vrstaKlasifikacijeSort", vrstaKlasifikacijeSort)
                .setParameter("vrstaKlasifikacijeMeni", woParametri.getVrstaKlasifikacijeMeni())
                .setParameter("brand", brand);

        Iterator i = q.getResultList().iterator();
        while (i.hasNext()) {
            Object[] parovi = (Object[]) i.next();
            OcpProizvod proizvod = (OcpProizvod) parovi[0];
            lp.add(proizvod);
            rowCount++;
        }

        if (pageNo == 0)
            return new Proizvodi(lp, vrstaKlasifikacijeSort, rowCount);
        else
            return new Proizvodi(lp, vrstaKlasifikacijeSort, 0);

    }

    public Proizvodi findProizvodiNaAkciji(String tipAkcije, int pageNo, int pageSize, WoParametri woParametri,
                                           List<WoPartnerSetting> woPartnerSettings) {
        Session session = getSession();

        Criteria cr = session.createCriteria(OcpProizvod.class, "pro")
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .createCriteria("pro.ocpKlasifikacijaProizvoda", "klPro")
                .add(Restrictions.eq("klPro.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeFilter()))
                .addOrder(Order.asc("klPro.id.klasifikacija"))
                .createCriteria("pro.woArtikliNaAkcijis", "wana")
                .add(Restrictions.eq("wana.idKompanijeKorisnik", woParametri.getWoKompanijaKorisnik().getId()))
                .add(Restrictions.like("wana.tipAkcije", tipAkcije, MatchMode.ANYWHERE))
                .add(Restrictions.or(Restrictions.ge("wana.datumDo", DateUtils.truncate(new Date(), Calendar.DATE)),
                        Restrictions.isNull("wana.datumDo")))
                .addOrder(Order.asc("pro.proizvod"));
        System.out.println("Sledi upit "
        );
        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, 0, rowCount);
    }

    public Proizvodi findProizvodiByName(String namePattern, int pageNo, int pageSize, WoParametri woParametri,
                                         List<WoPartnerSetting> woPartnerSettings) {
        Criteria cr = getSession().createCriteria(OcpProizvod.class)
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .add(Restrictions.or(Restrictions.like("nazivProizvoda", namePattern, MatchMode.ANYWHERE).ignoreCase(),
                        Restrictions.like("dodatniNaziv", namePattern, MatchMode.ANYWHERE).ignoreCase()))
                .addOrder(Order.asc("nazivProizvoda"))
                .addOrder(Order.asc("dodatniNaziv"))
                .addOrder(Order.asc("proizvod"));
        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, 0, rowCount);
    }

    public Proizvodi findFilterProizvodi(String brand, String patternNaziv, int pageNo, int pageSize, WoParametri woParametri,
                                         List<WoPartnerSetting> woPartnerSettings) {
        Session session = getSession();


        Criteria cr = session.createCriteria(OcpProizvod.class, "pro")
                .add(Restrictions.like("punNazivProizvoda", patternNaziv, MatchMode.ANYWHERE).ignoreCase())
                .setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)
                .setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize)
                .add(Subqueries.propertyIn("pro.proizvod", getProPoSklSubquery(woPartnerSettings)))
                .createCriteria("pro.ocpKlasifikacijaProizvoda", "okp")
                .add(Restrictions.like("okp.id.klasifikacija", brand + "%"))
                .add(Restrictions.eq("okp.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeFilter()))
                .addOrder(Order.asc("pro.proizvod"));

        List<OcpProizvod> lp = cr.setFirstResult(pageNo * pageSize)
                .setMaxResults(pageSize).list();
        int rowCount = 0;
        if (pageNo == 0)
            rowCount = getRowCount(cr);
        return new Proizvodi(lp, 0, rowCount);
    }

    public BigDecimal findStopaPorezaZaProizvod(int OJ, int proizvod) {

        String namedQ = "stopaPoreza";
        try {
            ProdPoreskaStopa o = (ProdPoreskaStopa) entityManager.createNamedQuery(namedQ)
                    .setParameter("oj", OJ)
                    .setParameter("proizvod", proizvod)
                    .getSingleResult();
            return o.getStopaPoreza();
        } catch (NoResultException e) {
            e.getStackTrace();
        } catch (NonUniqueResultException e) {
            e.getStackTrace();
        }
        return null;
    }

    public List<OcpProizvod> findProizvodiByName(String namePattern) {
        String [] terms= namePattern.trim().split("\\s+");

        /*List<OcpProizvod> lp = getSession().createCriteria(OcpProizvod.class)
                .add(Restrictions.like("punNazivProizvoda", namePattern, MatchMode.ANYWHERE).ignoreCase())
                .addOrder(Order.asc("punNazivProizvoda")).list();
        return lp; */
        Criteria criteria= getSession().createCriteria(OcpProizvod.class);
        int i=0;
        while (i+2<terms.length)
            criteria.add(Restrictions.or(Restrictions.like("punNazivProizvoda", "%" + terms[i++] + "%", MatchMode.ANYWHERE).ignoreCase(),
                                        (Restrictions.like("punNazivProizvoda", "%" + terms[i++] + "%", MatchMode.ANYWHERE).ignoreCase())));
        if (i<terms.length) criteria.add(Restrictions.like("punNazivProizvoda", "%" + terms[i] + "%", MatchMode.ANYWHERE).ignoreCase());
        criteria.addOrder(Order.asc("punNazivProizvoda"));
        return criteria.list();
    }


    public List<OcpProizvod> findProizvodiByNameAndByBrand(String namePattern, String brand, WoParametri woParametri) {
        List<OcpProizvod> lp = getSession().createCriteria(OcpProizvod.class, "pro")
                .add(Restrictions.like("punNazivProizvoda", namePattern, MatchMode.ANYWHERE).ignoreCase())
                .createCriteria("pro.ocpKlasifikacijaProizvoda", "okp")
                .add(Restrictions.like("okp.id.klasifikacija", brand + "%"))
                .add(Restrictions.eq("okp.id.vrstaKlasifikacije", woParametri.getVrstaKlasifikacijeFilter()))
                .addOrder(Order.asc("pro.punNazivProizvoda")).list();
        return lp;
    }

}
